import os
import shutil
import sys
import subprocess
import string
import random
import json
import re
import time
import argparse
import zipfile
from io import BytesIO

from concurrent.futures import ThreadPoolExecutor, as_completed

from utils.decorators import MessageDecorator
from utils.provider import APIProvider

try:
    import requests
    from colorama import Fore, Style
except ImportError:
    print("\tAlgumas depend√™ncias n√£o puderam ser importadas (possivelmente n√£o instaladas)")
    print(
        "Digite `pip3 install -r requirements.txt` para "
        " instalar todos os pacotes requeridos")
    sys.exit(1)


def ler_codigos_pais():
    with open("isdcodes.json") as file:
        isdcodes = json.load(file)
    return isdcodes


def obter_versao():
    try:
        return open(".version", "r").read().strip()
    except Exception:
        return '1.0'


def limpar_tela():
    if os.name == "nt":
        os.system("cls")
    else:
        os.system("clear")


def mostrar_banner():
    limpar_tela()
    logo = """
   ‚ñà‚ñà‚ñà‚ñà‚ñà                 ‚ñà‚ñàüî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥
   ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà                ‚ñà‚ñà
   ‚ñà‚ñà  ‚ñà‚ñà        ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà                 BEM-VINDO, LEND√ÅRIO!
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà
   ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà‚ñí‚ñà‚ñí‚ñà‚ñà ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥
   ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà ‚ñí ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí
   ‚ñí‚ñí‚ñí‚ñí‚ñí   ‚ñí‚ñí‚ñí‚ñí  ‚ñí‚ñí   ‚ñí‚ñí ‚ñí‚ñí‚ñí‚ñí‚ñí
                                         """
    if ASCII_MODE:
        logo = ""
    versao = "Vers√£o: " + __VERSAO__
    contribuidores = "Contribuidores: " + " ".join(__CONTRIBUIDORES__)
    print(random.choice(ALL_COLORS) + logo + RESET_ALL)
    mesgdcrt.SuccessMessage(versao)
    mesgdcrt.SectionMessage(contribuidores)
    print()


def verificar_internet():
    try:
        requests.get("https://motherfuckingwebsite.com")
    except Exception:
        mostrar_banner()
        mesgdcrt.FailureMessage("Conex√£o de internet ruim detectada")
        sys.exit(2)


def formatar_telefone(num):
    num = [n for n in num if n in string.digits]
    return ''.join(num).strip()


def atualizar_zip():
    sucesso = False
    if DEBUG_MODE:
        zip_url = "https://github.com/Hackertrackersj/Tbomb/archive/refs/heads/master.zip"
        dir_name = "TBomb-dev"
    else:
        zip_url = "https://github.com/Hackertrackersj/Tbomb/archive/refs/heads/master.zip"
        dir_name = "TBomb-master"
    print(ALL_COLORS[0] + "Baixando ZIP ... " + RESET_ALL)
    response = requests.get(zip_url)
    if response.status_code == 200:
        zip_content = response.content
        try:
            with zipfile.ZipFile(BytesIO(zip_content)) as zip_file:
                for member in zip_file.namelist():
                    filename = os.path.split(member)
                    if not filename[1]:
                        continue
                    novo_nome = os.path.join(
                        filename[0].replace(dir_name, "."),
                        filename[1])
                    source = zip_file.open(member)
                    target = open(novo_nome, "wb")
                    with source, target:
                        shutil.copyfileobj(source, target)
            sucesso = True
        except Exception:
            mesgdcrt.FailureMessage("Erro ao extrair!!")
    sys.exit()


def atualizar_git():
    sucesso = False
    try:
        print(ALL_COLORS[0] + "ATUALIZANDO " + RESET_ALL, end='')
        process = subprocess.Popen("git checkout . && git pull ",
                                   shell=True,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.STDOUT)
        while process:
            print(ALL_COLORS[0] + '.' + RESET_ALL, end='')
            time.sleep(1)
            returncode = process.poll()
            if returncode is not None:
                break
        sucesso = not process.returncode
    except Exception:
        sucesso = False
    print("\n")


def atualizar():
    if shutil.which('git'):
        atualizar_git()
    else:
        atualizar_zip()


def checar_atualizacoes():
    if DEBUG_MODE:
        mesgdcrt.WarningMessage(
            "MODO DEBUG Ativado! Checagem autom√°tica de atualiza√ß√µes desativada.")
        return
    mesgdcrt.SectionMessage("Checando atualiza√ß√µes")
    fver = requests.get(
        "https://github.com/AlexBieber/RevengeBomber2.0/blob/main/.version"
    ).text.strip()
    if fver != __VERSAO__:
        mesgdcrt.WarningMessage("Uma atualiza√ß√£o est√° dispon√≠vel")
        mesgdcrt.GeneralMessage("Iniciando atualiza√ß√£o...")
        atualizar()
    else:
        mesgdcrt.SuccessMessage("RevengeBomber est√° atualizado")
        mesgdcrt.GeneralMessage("Iniciando RevengeBomber")


def notificar():
    try:
        if DEBUG_MODE:
            url = "https://github.com/Hackertrackersj/Tbomb/blob/master/.notify"
        else:
            url = "https://github.com/Hackertrackersj/Tbomb/blob/master/.notify"
        noti = requests.get(url).text.upper()
        if len(noti) > 10:
            mesgdcrt.SectionMessage("NOTIFICA√á√ÉO: " + noti)
            print()
    except Exception:
        pass


def obter_info_telefone():
    while True:
        target = ""
        cc = input(mesgdcrt.CommandMessage(
            "Digite o c√≥digo do seu pa√≠s (sem +): "))
        cc = formatar_telefone(cc)
        if not country_codes.get(cc, False):
            mesgdcrt.WarningMessage(
                f"O c√≥digo do pa√≠s ({cc}) que voc√™ digitou √© inv√°lido ou n√£o suportado")
            continue
        target = input(mesgdcrt.CommandMessage(
            "Digite o n√∫mero alvo: +" + cc + " "))
        target = formatar_telefone(target)
        if (len(target) <= 6) or (len(target) >= 12):
            mesgdcrt.WarningMessage(
                f"O n√∫mero de telefone ({target}) que voc√™ digitou √© inv√°lido")
            continue
        return (cc, target)


def obter_info_email():
    mail_regex = r'^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
    while True:
        target = input(mesgdcrt.CommandMessage("Digite o email alvo: "))
        if not re.search(mail_regex, target, re.IGNORECASE):
            mesgdcrt.WarningMessage(
                f"O email ({target}) que voc√™ digitou √© inv√°lido")
            continue
        return target


def imprimir_status(cc, target, sucesso, falhas):
    total = sucesso + falhas
    mesgdcrt.SectionMessage("Ataque em andamento - Por favor, aguarde")
    mesgdcrt.GeneralMessage(
        "Mantenha-se conectado √† internet durante o ataque")
    mesgdcrt.GeneralMessage(f"Alvo       : {cc} {target}")
    mesgdcrt.GeneralMessage(f"Enviadas   : {total}")
    mesgdcrt.GeneralMessage(f"Sucesso    : {sucesso}")
    mesgdcrt.GeneralMessage(f"Falhas     : {falhas}")
    mesgdcrt.WarningMessage(
        "Esta ferramenta foi feita para fins de pesquisa e estudo")
    mesgdcrt.SuccessMessage("DCL üá±üáª foi criado por <üá±üáªSPAMüá±üáª>")
    mesgdcrt.SuccessMessage(
        "GitHub do Criador: https://github.com/DOCTORcoringa/DOCTORcoringa")


def executar_ataque(mode, cc, target, count, delay, max_threads):
    api = APIProvider(cc, target, mode, delay=delay)
    limpar_tela()
    mesgdcrt.SectionMessage("Preparando ataque - Por favor aguarde")
    mesgdcrt.GeneralMessage("Mantenha-se conectado √† internet durante o ataque")
    mesgdcrt.GeneralMessage(f"Vers√£o API : {api.api_version}")
    mesgdcrt.GeneralMessage(f"Alvo       : {cc} {target}")
    mesgdcrt.GeneralMessage(f"Quantidade : {count}")
    mesgdcrt.GeneralMessage(f"Threads    : {max_threads} threads")
    mesgdcrt.GeneralMessage(f"Delay      : {delay} segundos")
    mesgdcrt.WarningMessage(
        "Esta ferramenta foi feita para fins de pesquisa e estudo")
    print()
    input(mesgdcrt.CommandMessage(
        "Pressione [CTRL+Z] para pausar o ataque ou [ENTER] para continuar"))

    if len(APIProvider.api_providers) == 0:
        mesgdcrt.FailureMessage("Pa√≠s ou alvo n√£o suportado")
        mesgdcrt.GeneralMessage("Sinta-se √† vontade para nos contatar")
        input(mesgdcrt.CommandMessage("Pressione [ENTER] para sair"))
        mostrar_banner()
        sys.exit()

    sucesso, falhas = 0, 0
    while sucesso < count:
        with ThreadPoolExecutor(max_workers=max_threads) as executor:
            jobs = []
            for _ in range(count - sucesso):
                jobs.append(executor.submit(api.hit))

            for job in as_completed(jobs):
                resultado = job.result()
                if resultado is None:
                    mesgdcrt.FailureMessage(
                        "Limite de ataques para o alvo atingido")
                    mesgdcrt.GeneralMessage("Tente novamente mais tarde")
                    input(mesgdcrt.CommandMessage("Pressione [ENTER] para sair"))
                    mostrar_banner()
                    sys.exit()
                if resultado:
                    sucesso += 1
                else:
                    falhas += 1
                limpar_tela()
                imprimir_status(cc, target, sucesso, falhas)
    print("\n")
    mesgdcrt.SuccessMessage("Ataque conclu√≠do!")
    time.sleep(1.5)
    mostrar_banner()
    sys.exit()


def selecionar_no(mode="sms"):
    mode = mode.lower().strip()
    try:
        limpar_tela()
        mostrar_banner()
        verificar_internet()
        checar_atualizacoes()
        notificar()

        max_limits = {"sms": 100000, "call": 50000, "mail": 200000}
        cc, target = "", ""
        if mode in ["sms", "call"]:
            cc, target = obter_info_telefone()
            if cc != "91":
                max_limits.update({"sms": 100000})
        elif mode == "mail":
            target = obter_info_email()
        else:
            raise KeyboardInterrupt

        limite = max_limits[mode]
        while True:
            try:
                msg = ("Digite a quantidade de {tipo}".format(tipo=mode.upper()) +
                       " para enviar (M√°x {limite}): ".format(limite=limite))
                count = int(input(mesgdcrt.CommandMessage(msg)).strip())
                if count > limite or count == 0:
                    mesgdcrt.WarningMessage(f"Voc√™ solicitou {count} {mode.upper()}")
                    mesgdcrt.GeneralMessage(f"Limite autom√°tico ajustado para {limite}")
                    count = limite
                delay = float(input(mesgdcrt.CommandMessage("Digite o tempo de delay (em segundos): ")).strip())
                max_thread_limit = (count // 10) if (count // 10) > 0 else 1
                max_threads = int(input(mesgdcrt.CommandMessage(f"Digite o n√∫mero de threads (Recomendado: {max_thread_limit}): ")).strip())
                max_threads = max_threads if (max_threads > 0) else max_thread_limit
                if (count < 0 or delay < 0):
                    raise Exception
                break
            except KeyboardInterrupt as ki:
                raise ki
            except Exception:
                mesgdcrt.FailureMessage("Leia as instru√ß√µes com aten√ß√£o!!!")
                print()

        executar_ataque(mode, cc, target, count, delay, max_threads)
    except KeyboardInterrupt:
        mesgdcrt.WarningMessage("Interrup√ß√£o detectada - Saindo...")
        sys.exit()


mesgdcrt = MessageDecorator("icon")
if sys.version_info[0] != 3:
    mesgdcrt.FailureMessage("DCL üá±üáª funciona apenas com Python v3")
    sys.exit()

try:
    country_codes = ler_codigos_pais()["isdcodes"]
except FileNotFoundError:
    atualizar()


__VERSAO__ = obter_versao()
__CONTRIBUIDORES__ = ['<üá±üáªSPAMüá±üáª>']

ALL_COLORS = [Fore.GREEN, Fore.RED, Fore.YELLOW, Fore.BLUE,
              Fore.MAGENTA, Fore.CYAN, Fore.WHITE]
RESET_ALL = Style.RESET_ALL

ASCII_MODE = False
DEBUG_MODE = False

descricao = """DCL üá±üáª - Sua Aplica√ß√£o Amig√°vel de Spam

DCL üá±üáª pode ser usado para v√°rios prop√≥sitos, incluindo:
\t Expor APIs vulner√°veis na Internet
\t Spam amig√°vel
\t Testar seu detector de spam e mais...

DCL üá±üáª n√£o √© destinado a usos maliciosos.
"""

parser = argparse.ArgumentParser(description=descricao,
                                 epilog='Criado por <üá±üáªSPAMüá±üáª>')
parser.add_argument("-sms", "--sms", action="store_true",
                    help="Iniciar DCL üá±üáª no modo SMS")
parser.add_argument("-call", "--call", action="store_true",
                    help="Iniciar DCL üá±üáª no modo chamada")
parser.add_argument("-mail", "--mail", action="store_true",
                    help="Iniciar DCL üá±üáª no modo email")
parser.add_argument("-ascii", "--ascii", action="store_true",
                    help="Mostrar apenas caracteres do conjunto ASCII padr√£o")
parser.add_argument("-u", "--update", action="store_true",
                    help="Atualizar o DCL üá±üáª")
parser.add_argument("-c", "--contributors", action="store_true",
                    help="Mostrar contribuidores atuais")
parser.add_argument("-v", "--version", action="store_true",
                    help="Mostrar vers√£o atual do DCL üá±üáª")


if __name__ == "__main__":
    args = parser.parse_args()
    if args.ascii:
        ASCII_MODE = True
        mesgdcrt = MessageDecorator("stat")
    if args.version:
        print("Vers√£o: ", __VERSAO__)
    elif args.contributors:
        print("Contribuidores: ", " ".join(__CONTRIBUIDORES__))
    elif args.update:
        atualizar()
    elif args.mail:
        selecionar_no(mode="mail")
    elif args.call:
        selecionar_no(mode="call")
    elif args.sms:
        selecionar_no(mode="sms")
    else:
        choice = ""
        opcoes_disponiveis = {
            "1": "SMS",
            "2": "CALL",
            "3": "MAIL"
        }
        try:
            while (choice not in opcoes_disponiveis):
                limpar_tela()
                mostrar_banner()
                print("Op√ß√µes dispon√≠veis:\n")
                for key, value in opcoes_disponiveis.items():
                    print(f"[ {key} ] {value} BOMB")
                print()
                choice = input(mesgdcrt.CommandMessage("Digite sua escolha: "))
            selecionar_no(mode=opcoes_disponiveis[choice].lower())
        except KeyboardInterrupt:
            mesgdcrt.WarningMessage("Interrup√ß√£o detectada - Saindo...")
            sys.exit()
    sys.exit()
