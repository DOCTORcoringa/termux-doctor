#!/usr/bin/env python3
# coding: utf-8

import os
import sys
import time
import random
import threading
import requests

# Cores e estilos ANSI
RED = '\033[91m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
CYAN = '\033[96m'
MAGENTA = '\033[95m'
BOLD = '\033[1m'
RESET = '\033[0m'

def clear_screen():
    """Limpa a tela do terminal no Termux/Linux."""
    os.system('clear')

def banner():
    print(MAGENTA + BOLD)
    print("===============================================")
    print("    H4CK3R WH1SK3Y ™  |  DOCTOR RACK TOOL      ")
    print("===============================================")
    print(GREEN + "       Internet Segura é Internet Livre!       " + RESET)
    print(CYAN + BOLD + "     \"Protegendo a rede, derrubando o caos\"    " + RESET)
    print("")

def menu():
    print(YELLOW + BOLD + "Escolha sua função rack style:" + RESET)
    options = [
        "1 - Spam Massivo Detectado",
        "2 - Bot Malicioso Suspeito",
        "3 - Vírus/Malware Propagado",
        "4 - Phishing / Fake Site",
        "5 - Conteúdo Impróprio / Abusivo",
        "6 - Propaganda Enganosa",
        "0 - Sair / Encerrar"
    ]
    for opt in options:
        print(opt)
    while True:
        choice = input(CYAN + "Digite a opção: " + RESET).strip()
        if choice in [str(i) for i in range(7)]:
            return int(choice)
        else:
            print(RED + "Opção inválida. Tente novamente!" + RESET)

# Conteúdos pré definidos para mensagens padrão (usadas para visualização e debug)
conteudos = {
    1: "Spam massivo detectado",
    2: "Bot malicioso suspeito",
    3: "Vírus/Malware propagado",
    4: "Phishing / Fake Site detectado",
    5: "Conteúdo impróprio / abusivo reportado",
    6: "Propaganda enganosa identificada"
}

def progress_bar(total, current, length=30):
    done = int(length * current / total)
    bar = '#' * done + '-' * (length - done)
    print(CYAN + BOLD + f"\rProgresso: [{bar}] {int(100*current/total)}%" + RESET, end='')

def loading_anim(stop_event):
    symbols = ['|', '/', '-', '\\']
    idx = 0
    while not stop_event.is_set():
        print(YELLOW + f"\rEnviando rack... {symbols[idx % len(symbols)]}" + RESET, end='', flush=True)
        idx += 1
        time.sleep(0.15)
    print('\r' + ' '*30 + '\r', end='')

def enviar_denuncia(url, payload, headers):
    try:
        resp = requests.post(url, data=payload, headers=headers, timeout=10)
        if resp.status_code == 200:
            print(GREEN + "[OK]" + RESET, f"Denúncia enviada para: {payload['alvo']} - Tipo: {payload['tipo']}")
        else:
            print(RED + "[ERRO]" + RESET, f"Status {resp.status_code}: {payload['alvo']} - Tipo: {payload['tipo']}")
    except Exception as e:
        print(RED + "[FALHA]" + RESET, f"Erro: {e}")

def main():
    clear_screen()
    banner()

    endpoint = "https://example.com/denunciar"  # Troque para seu endpoint real

    user_agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
        "Mozilla/5.0 (X11; Linux x86_64)",
        "Dalvik/2.1.0 (Linux; U; Android 10; SM-G973F)",
        "curl/7.68.0",
        "TermuxBot/1.0"
    ]

    while True:
        opcao = menu()

        if opcao == 0:
            print(GREEN + "\nSessão encerrada. Rede protegida com H4CK3R WH1SK3Y!\n" + RESET)
            sys.exit(0)

        # Para todas opções que enviam denúncia, pede alvo e quantidade
        alvo_number = input(CYAN + "Digite o número ou identificador do alvo para denúncia (ex: telefone, IP, site): " + RESET).strip()
        if not alvo_number:
            print(RED + "Alvo inválido! Voltando ao menu..." + RESET)
            continue

        while True:
            qtd = input(CYAN + "Quantas denúncias deseja enviar para esse alvo? (1-100): " + RESET).strip()
            if qtd.isdigit() and 1 <= int(qtd) <= 100:
                qtd = int(qtd)
                break
            else:
                print(RED + "Digite uma quantidade válida entre 1 e 100." + RESET)

        clear_screen()
        banner()

        print(YELLOW + f"\nPreparando para enviar {qtd} denúncias para alvo '{alvo_number}' do tipo '{conteudos[opcao]}' rack style...\n" + RESET)

        evento_parar = threading.Event()
        thread_loading = threading.Thread(target=loading_anim, args=(evento_parar,))
        thread_loading.start()

        for i in range(qtd):
            dados = {
                "alvo": alvo_number,
                "tipo": conteudos[opcao],
                "descricao": f"Denúncia automatizada por H4CK3R WH1SK3Y ™ #{i+1}",
                "id": i+1
            }
            cabecalhos = {
                "User-Agent": random.choice(user_agents),
                "Content-Type": "application/x-www-form-urlencoded"
            }

            enviar_denuncia(endpoint, dados, cabecalhos)
            progress_bar(qtd, i+1)
            time.sleep(random.uniform(1.2, 2.5))

        evento_parar.set()
        thread_loading.join()

        print(GREEN + f"\n\n[SUCESSO] {qtd} denúncias enviadas para '{alvo_number}' com sucesso.\n" + RESET)
        print(CYAN + BOLD + "Obrigado por manter a web segura com H4CK3R WH1SK3Y ™\n" + RESET)
        input(YELLOW + "Pressione Enter para continuar..." + RESET)
        clear_screen()
        banner()

if __name__ == "__main__":
    main()
